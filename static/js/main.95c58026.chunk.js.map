{"version":3,"sources":["components/box.js","components/grid.js","components/buttons.js","components/main.js","App.js","index.js"],"names":["Box","props","className","boxClass","id","onClick","selectBox","row","col","Grid","width","cols","rowsArr","i","rows","j","boxId","gridFull","push","key","style","Buttons","ButtonToolbar","playButton","pauseButton","clear","slow","fast","seed","DropdownButton","title","onSelect","evt","gridSize","Dropdown","Item","eventKey","speed","Main","mounted","useRef","useState","generation","setGeneration","Array","fill","map","setGridFull","intervalId","setIntervalId","useEffect","current","console","log","gridCopy","Math","floor","random","clearInterval","setInterval","play","grid","g","g2","count","prevGeneration","size","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.95c58026.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst Box = (props) => {\r\n    return(\r\n        <div \r\n        className={props.boxClass}\r\n        id={props.id}\r\n        onClick={() => props.selectBox(props.row, props.col)}>\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Box","import React from 'react';\r\nimport Box from './box';\r\n\r\nconst Grid = (props) => {\r\n    const width = (props.cols * 14) + 1;\r\n    let rowsArr = [];\r\n    let boxClass = \"\";\r\n    for(let i = 0; i < props.rows; i++) {\r\n        for(let j = 0; j < props.cols; j++) {\r\n            \r\n            let boxId = i + \"_\" + j;\r\n            \r\n            boxClass = props.gridFull[i][j] ? \"box on\" : \"box off\"\r\n            \r\n            rowsArr.push(\r\n                <Box\r\n                boxClass={boxClass}\r\n                key={boxId}\r\n                boxId={boxId}\r\n                row={i}\r\n                col={j}\r\n                selectBox={props.selectBox}\r\n                />\r\n            );\r\n        }\r\n    }\r\n    \r\n    return(\r\n        <div className='grid' style={{width: width}}>\r\n            {rowsArr}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Grid","import React from 'react';\r\nimport { ButtonToolbar, Dropdown, DropdownButton } from 'react-bootstrap';\r\n\r\nconst Buttons = (props) => {\r\n\r\n    const handleSelect = (evt) => {\r\n        props.gridSize(evt);\r\n    }\r\n\r\n    return (\r\n        <div className='center'>\r\n            <ButtonToolbar>\r\n                <button className='btn btn default' onClick={() => props.playButton()}>Play</button>\r\n                <button className='btn btn default' onClick={() => props.pauseButton()}>Pause</button>\r\n                <button className='btn btn default' onClick={() => props.clear()}>Clear</button>\r\n                <button className='btn btn default' onClick={() => props.slow()}>Slow</button>\r\n                <button className='btn btn default' onClick={() => props.fast()}>Fast</button>\r\n                <button className='btn btn default' onClick={() => props.seed()}>Seed</button>\r\n                <DropdownButton\r\n                    title=\"Grid Size\"\r\n                    id=\"size-menu\"\r\n                    onSelect={handleSelect}\r\n                >\r\n                    <Dropdown.Item eventKey='1'>20x10</Dropdown.Item>\r\n                    <Dropdown.Item eventKey='2'>50x30</Dropdown.Item>\r\n                    <Dropdown.Item eventKey='3'>70x50</Dropdown.Item>\r\n                </DropdownButton>\r\n            </ButtonToolbar>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Buttons","import React, { useState, useEffect, useRef } from 'react';\r\nimport Grid from './grid'\r\nimport Buttons from './buttons'\r\n\r\nlet rows = 30;\r\nlet cols = 50;\r\nlet speed = 100;\r\n\r\nconst Main = () => {\r\n\r\n    const mounted = useRef()\r\n\r\n    const [generation, setGeneration] = useState(0);\r\n    const [gridFull, setGridFull] = useState(Array(rows).fill().map(() => Array(cols).fill(false)));\r\n    const [intervalId, setIntervalId] = useState(null);\r\n\r\n    useEffect(() => {\r\n        if(!mounted.current) {\r\n            seed();\r\n        playButton();\r\n        mounted.current = true;\r\n        console.log('This Runs')\r\n        }\r\n        \r\n    }, []);\r\n\r\n    const selectBox = (row, col) => {\r\n        let gridCopy = [...gridFull];\r\n        gridCopy[row][col] = !gridCopy[row][col];\r\n        setGridFull(gridCopy);\r\n    }\r\n\r\n    const seed = () => {\r\n        let gridCopy = [...gridFull];\r\n        for (let i = 0; i < rows; i++) {\r\n            for (let j = 0; j < cols; j++) {\r\n                if (Math.floor(Math.random() * 4) === 1) {\r\n                    gridCopy[i][j] = true;\r\n                }\r\n            }\r\n        }\r\n        setGridFull(gridCopy);\r\n    }\r\n\r\n    const playButton = () => {\r\n        clearInterval(intervalId)\r\n        setIntervalId( setInterval(() => {\r\n            play()\r\n        }, speed)\r\n        )\r\n    }\r\n\r\n    const pauseButton = () => {\r\n        clearInterval(intervalId)\r\n    }\r\n\r\n    const slow = () => {\r\n        speed = 1000;\r\n        playButton();\r\n    }\r\n    const fast = () => {\r\n        speed = 100;\r\n        playButton();\r\n    }\r\n\r\n    const clear = () => {\r\n\r\n        clearInterval(intervalId)\r\n        let grid = Array(rows).fill().map(() => Array(cols).fill(false));\r\n        setGridFull(grid);\r\n        setGeneration(0);\r\n    }\r\n\r\n    const gridSize = (size) => {\r\n        switch(size) {\r\n            case '1':\r\n                rows = 10;\r\n                cols = 20;\r\n            break;\r\n            case '2':\r\n                rows = 30;\r\n                cols = 50;\r\n            break;\r\n            case '3':\r\n                rows = 50;\r\n                cols = 70;\r\n            break;\r\n            default:\r\n                rows = 30;\r\n                cols = 50;\r\n        }\r\n        clear();\r\n    }\r\n\r\n    const play = () => {\r\n        let g = gridFull;\r\n        let g2 = [...gridFull];\r\n\r\n        for (let i = 0; i < rows; i++) {\r\n            for (let j = 0; j < cols; j++) {\r\n                let count = 0;\r\n                if (i > 0) if (g[i - 1][j]) count++;\r\n                if (i > 0 && j > 0) if (g[i - 1][j - 1]) count++;\r\n                if (i > 0 && j < cols - 1) if (g[i - 1][j + 1]) count++;\r\n                if (j < cols - 1) if (g[i][j + 1]) count++;\r\n                if (j > 0) if (g[i][j - 1]) count++;\r\n                if (i < rows - 1) if (g[i + 1][j]) count++;\r\n                if (i < rows - 1 && j > 0) if (g[i + 1][j - 1]) count++;\r\n                if (i < rows - 1 && j < cols - 1) if (g[i + 1][j + 1]) count++;\r\n                if (g[i][j] && (count < 2 || count > 3)) g2[i][j] = false;\r\n                if (!g[i][j] && count === 3) g2[i][j] = true;\r\n            }\r\n        }\r\n        setGeneration(prevGeneration => prevGeneration + 1);\r\n        setGridFull(g2);        \r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <h1>The Game of Life</h1>\r\n            <Buttons\r\n            playButton={playButton}\r\n            pauseButton={pauseButton}\r\n            slow={slow}\r\n            fast={fast}\r\n            clear={clear}\r\n            seed={seed}\r\n            gridSize={gridSize}\r\n            />\r\n            <Grid\r\n                gridFull={gridFull}\r\n                rows={rows}\r\n                cols={cols}\r\n                selectBox={selectBox}\r\n            />\r\n            <h2>Generations: {generation}</h2>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Main;","import React from 'react';\nimport Main from './components/main'\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Main />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n\n// import React from 'react';\n// import ReactDOM from 'react-dom';\n// import './index.css';\n// import { ButtonToolbar, Dropdown, DropdownButton } from 'react-bootstrap';\n\n// class Box extends React.Component {\n// \tselectBox = () => {\n// \t\tthis.props.selectBox(this.props.row, this.props.col);\n// \t}\n\n// \trender() {\n// \t\treturn (\n// \t\t\t<div\n// \t\t\t\tclassName={this.props.boxClass}\n// \t\t\t\tid={this.props.id}\n// \t\t\t\tonClick={this.selectBox}\n// \t\t\t/>\n// \t\t);\n// \t}\n// }\n\n// class Grid extends React.Component {\n// \trender() {\n// \t\tconst width = (this.props.cols * 14);\n// \t\tvar rowsArr = [];\n\n// \t\tvar boxClass = \"\";\n// \t\tfor (var i = 0; i < this.props.rows; i++) {\n// \t\t\tfor (var j = 0; j < this.props.cols; j++) {\n// \t\t\t\tlet boxId = i + \"_\" + j;\n\n// \t\t\t\tboxClass = this.props.gridFull[i][j] ? \"box on\" : \"box off\";\n// \t\t\t\trowsArr.push(\n// \t\t\t\t\t<Box\n// \t\t\t\t\t\tboxClass={boxClass}\n// \t\t\t\t\t\tkey={boxId}\n// \t\t\t\t\t\tboxId={boxId}\n// \t\t\t\t\t\trow={i}\n// \t\t\t\t\t\tcol={j}\n// \t\t\t\t\t\tselectBox={this.props.selectBox}\n// \t\t\t\t\t/>\n// \t\t\t\t);\n// \t\t\t}\n// \t\t}\n\n// \t\treturn (\n// \t\t\t<div className=\"grid\" style={{width: width}}>\n// \t\t\t\t{rowsArr}\n// \t\t\t</div>\n// \t\t);\n// \t}\n// }\n\n// class Buttons extends React.Component {\n\n// \thandleSelect = (evt) => {\n// \t\tthis.props.gridSize(evt);\n// \t}\n\n// \trender() {\n// \t\treturn (\n// \t\t\t<div className=\"center\">\n// \t\t\t\t<ButtonToolbar>\n// \t\t\t\t\t<button className=\"btn btn-default\" onClick={this.props.playButton}>\n// \t\t\t\t\t\tPlay\n// \t\t\t\t\t</button>\n// \t\t\t\t\t<button className=\"btn btn-default\" onClick={this.props.pauseButton}>\n// \t\t\t\t\t  Pause\n// \t\t\t\t\t</button>\n// \t\t\t\t\t<button className=\"btn btn-default\" onClick={this.props.clear}>\n// \t\t\t\t\t  Clear\n// \t\t\t\t\t</button>\n// \t\t\t\t\t<button className=\"btn btn-default\" onClick={this.props.slow}>\n// \t\t\t\t\t  Slow\n// \t\t\t\t\t</button>\n// \t\t\t\t\t<button className=\"btn btn-default\" onClick={this.props.fast}>\n// \t\t\t\t\t  Fast\n// \t\t\t\t\t</button>\n// \t\t\t\t\t<button className=\"btn btn-default\" onClick={this.props.seed}>\n// \t\t\t\t\t  Seed\n// \t\t\t\t\t</button>\n// \t\t\t\t\t<DropdownButton\n// \t\t\t\t\t\ttitle=\"Grid Size\"\n// \t\t\t\t\t\tid=\"size-menu\"\n// \t\t\t\t\t\tonSelect={this.handleSelect}\n// \t\t\t\t\t>\n// \t\t\t\t\t\t<Dropdown.Item eventKey=\"1\">20x10</Dropdown.Item>\n// \t\t\t\t\t\t<Dropdown.Item eventKey=\"2\">50x30</Dropdown.Item>\n// \t\t\t\t\t\t<Dropdown.Item eventKey=\"3\">70x50</Dropdown.Item>\n// \t\t\t\t\t</DropdownButton>\n// \t\t\t\t</ButtonToolbar>\n// \t\t\t</div>\n// \t\t\t)\n// \t}\n// }\n\n// class Main extends React.Component {\n// \tconstructor() {\n// \t\tsuper();\n// \t\tthis.speed = 100;\n// \t\tthis.rows = 30;\n// \t\tthis.cols = 50;\n\n// \t\tthis.state = {\n// \t\t\tgeneration: 0,\n// \t\t\tgridFull: Array(this.rows).fill().map(() => Array(this.cols).fill(false))\n// \t\t}\n//     }\n    \n   \n\n// \tselectBox = (row, col) => {\n// \t\tlet gridCopy = arrayClone(this.state.gridFull);\n// \t\tgridCopy[row][col] = !gridCopy[row][col];\n// \t\tthis.setState({\n// \t\t\tgridFull: gridCopy\n// \t\t});\n// \t}\n\n// \tseed = () => {\n// \t\tlet gridCopy = arrayClone(this.state.gridFull);\n// \t\tfor (let i = 0; i < this.rows; i++) {\n// \t\t\tfor (let j = 0; j < this.cols; j++) {\n// \t\t\t\tif (Math.floor(Math.random() * 4) === 1) {\n// \t\t\t\t\tgridCopy[i][j] = true;\n// \t\t\t\t}\n// \t\t\t}\n// \t\t}\n// \t\tthis.setState({\n// \t\t\tgridFull: gridCopy\n// \t\t});\n// \t}\n\n// \tplayButton = () => {\n// \t\tclearInterval(this.intervalId);\n//         this.intervalId = setInterval(this.play, this.speed);\n// \t}\n\n// \tpauseButton = () => {\n// \t\tclearInterval(this.intervalId);\n// \t}\n\n// \tslow = () => {\n// \t\tthis.speed = 1000;\n// \t\tthis.playButton();\n// \t}\n\n// \tfast = () => {\n// \t\tthis.speed = 100;\n// \t\tthis.playButton();\n// \t}\n\n// \tclear = () => {\n// \t\tvar grid = Array(this.rows).fill().map(() => Array(this.cols).fill(false));\n// \t\tthis.setState({\n// \t\t\tgridFull: grid,\n// \t\t\tgeneration: 0\n// \t\t});\n// \t}\n\n// \tgridSize = (size) => {\n// \t\tswitch (size) {\n// \t\t\tcase \"1\":\n// \t\t\t\tthis.cols = 20;\n// \t\t\t\tthis.rows = 10;\n// \t\t\tbreak;\n// \t\t\tcase \"2\":\n// \t\t\t\tthis.cols = 50;\n// \t\t\t\tthis.rows = 30;\n// \t\t\tbreak;\n// \t\t\tdefault:\n// \t\t\t\tthis.cols = 70;\n// \t\t\t\tthis.rows = 50;\n// \t\t}\n// \t\tthis.clear();\n// \t}\n\n// \tplay = () => {\n// \t\tlet g = this.state.gridFull;\n// \t\tlet g2 = arrayClone(this.state.gridFull);\n\n// \t\tfor (let i = 0; i < this.rows; i++) {\n// \t\t  for (let j = 0; j < this.cols; j++) {\n// \t\t    let count = 0;\n// \t\t    if (i > 0) if (g[i - 1][j]) count++;\n// \t\t    if (i > 0 && j > 0) if (g[i - 1][j - 1]) count++;\n// \t\t    if (i > 0 && j < this.cols - 1) if (g[i - 1][j + 1]) count++;\n// \t\t    if (j < this.cols - 1) if (g[i][j + 1]) count++;\n// \t\t    if (j > 0) if (g[i][j - 1]) count++;\n// \t\t    if (i < this.rows - 1) if (g[i + 1][j]) count++;\n// \t\t    if (i < this.rows - 1 && j > 0) if (g[i + 1][j - 1]) count++;\n// \t\t    if (i < this.rows - 1 && j < this.cols - 1) if (g[i + 1][j + 1]) count++;\n// \t\t    if (g[i][j] && (count < 2 || count > 3)) g2[i][j] = false;\n// \t\t    if (!g[i][j] && count === 3) g2[i][j] = true;\n// \t\t  }\n// \t\t}\n// \t\tthis.setState({\n// \t\t  gridFull: g2,\n// \t\t  generation: this.state.generation + 1\n// \t\t});\n\n// \t}\n\n// \tcomponentDidMount() {\n// \t\tthis.seed();\n// \t\tthis.playButton();\n// \t}\n\n// \trender() {\n// \t\treturn (\n// \t\t\t<div>\n// \t\t\t\t<h1>The Game of Life</h1>\n// \t\t\t\t<Buttons\n// \t\t\t\t\tplayButton={this.playButton}\n// \t\t\t\t\tpauseButton={this.pauseButton}\n// \t\t\t\t\tslow={this.slow}\n// \t\t\t\t\tfast={this.fast}\n// \t\t\t\t\tclear={this.clear}\n// \t\t\t\t\tseed={this.seed}\n// \t\t\t\t\tgridSize={this.gridSize}\n// \t\t\t\t/>\n// \t\t\t\t<Grid\n// \t\t\t\t\tgridFull={this.state.gridFull}\n// \t\t\t\t\trows={this.rows}\n// \t\t\t\t\tcols={this.cols}\n// \t\t\t\t\tselectBox={this.selectBox}\n// \t\t\t\t/>\n// \t\t\t\t<h2>Generations: {this.state.generation}</h2>\n// \t\t\t</div>\n// \t\t);\n// \t}\n// }\n\n// function arrayClone(arr) {\n// \treturn JSON.parse(JSON.stringify(arr));\n// }\n\n// ReactDOM.render(<Main />, document.getElementById('root'));\n\n"],"sourceRoot":""}